@using Sales.Shared.Entities
@using Sales.WEB.Repositories
@page "/countries"
@inject IRepository Repository
@inject SweetAlertService sweetAlertService

<h3>Paises</h3>

<a class="btn btn-primary mb-3" href="/countries/create">Nuevo País</a>

<GenericList MyList="Countries">

	<Loading>
		<p>Cargando...</p>

	</Loading>

	<Body>
		<table class="table table-striped">
			<thead>
				<tr>
					<th></th>
					<th>País</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var country in Countries!)
				{
					<tr>
						<td>
							<a class="btn btn-warning" href="/countries/edit/@country.Id">Editar</a>

							<button class="btn btn-danger" @onclick=@(()=>DeleteAsync(country.Id) )>Borrar</button>
						</td>
						<td>

							@country.Name
						</td>
					</tr>
				}
			</tbody>
		</table>
	</Body>

</GenericList>






@code {
	public IList<Country>? Countries { get; set; }

	protected async override Task OnInitializedAsync()
	{
		await LoadAsync();
	}

	private async Task LoadAsync()
	{
		var responseHppt = await Repository.Get<List<Country>>("api/countries");
		Countries = responseHppt.Response!;
	}

	private async Task DeleteAsync(int Id)
	{
		var result = await sweetAlertService.FireAsync(new SweetAlertOptions
			{
				Title = "Confirmación",
				Text = "¿Realmente desea borrar el registro?",
				Icon = SweetAlertIcon.Warning,
				ShowCancelButton = true,
				CancelButtonText = "No",
				ConfirmButtonText = "Si",
			});

		var confirm = string.IsNullOrEmpty(result.Value);
		if (confirm)
		{
			return;
		}
		var responseHppt = await Repository.Delete($"/api/countries/{Id}");
		if (responseHppt.Error)
		{
			if (responseHppt.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
			{
				var message = await responseHppt.GetErrorMessageAsync();
				await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
			}
		}

		await LoadAsync();
	}
}